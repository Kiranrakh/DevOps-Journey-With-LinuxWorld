============================================================
 Session 9: Argo CD & Kubernetes Deployments with GitOps
============================================================

📘 Topics Covered:
------------------
1. Argo CD & Kubernetes Deployment Overview
2. GitOps Best Practices
3. Argo CD Application Management
4. Dynamic Scaling
5. Multi-Cluster Deployment
6. Minikube Setup (Practice Environment)
7. YAML Config for Argo CD
8. Troubleshooting & Common Issues
9. Validation & Debugging Techniques
10. Argo CD User Management


📌 1. Argo CD & Kubernetes Deployment:
--------------------------------------
Argo CD simplifies Kubernetes app deployments by tracking Git repos and syncing declared app state to actual cluster state.

🔄 Sync Types:
- Manual
- Automatic (with self-heal + prune)


📌 2. GitOps Best Practices:
----------------------------
✅ Store all app manifests and Helm charts in Git
✅ Use separate branches for dev, staging, and prod
✅ Automate sync using Argo CD's auto-sync policy
✅ Use ApplicationSets for multiple apps
✅ Write clear commit messages


📌 3. Argo CD Application Management:
-------------------------------------
You can manage apps in the Argo CD UI or CLI.

🔧 Create App via CLI:
```bash
argocd app create my-app \
  --repo https://github.com/<user>/<repo> \
  --path k8s/app \
  --dest-server https://kubernetes.default.svc \
  --dest-namespace default
```

📋 View App Status:
```bash
argocd app get my-app
```

🔄 Sync App:
```bash
argocd app sync my-app
```


📌 4. Dynamic Scaling:
-----------------------
You can scale applications dynamically using Argo CD in combination with Kubernetes Horizontal Pod Autoscaler (HPA).

🔧 Example HPA YAML:
```yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: my-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-app
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
```


📌 5. Multi-Cluster Deployment:
-------------------------------
Register multiple clusters and deploy apps across them using ApplicationSets or individual apps.

🔧 Register Cluster:
```bash
argocd cluster add <CONTEXT-NAME>
```

📁 Repo Structure for Multiple Clusters:
```
├── dev
│   └── app
├── staging
│   └── app
└── prod
    └── app
```


📌 6. Minikube Setup (Practice):
--------------------------------
Use Minikube for a local cluster setup.

🔧 Commands:
```bash
minikube start --driver=docker
```

🔧 Install Argo CD:
```bash
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
```

🌐 Access Argo CD UI via NodePort:
```bash
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
```

🔐 Get Argo CD UI URL:
```bash
minikube service argocd-server -n argocd --url
```

🔑 Login to Argo CD using NodePort:
```bash
argocd login <NODE-IP>:<NODEPORT> --username admin --password <password> --insecure
```


📌 7. YAML Config for Argo CD:
------------------------------
Example App YAML:
```yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: sample-app
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/<user>/<repo>
    targetRevision: HEAD
    path: k8s/app
  destination:
    server: https://kubernetes.default.svc
    namespace: default
  syncPolicy:
    automated:
      selfHeal: true
      prune: true
```


📌 8. Troubleshooting Common Issues:
------------------------------------
❌ App out of sync:
- Fix the Git repo or check manifest errors

❌ Repo not reachable:
- Validate repo URL & access rights

❌ Permissions denied:
- Check RBAC and service account bindings


📌 9. Validation & Debugging:
-----------------------------
🔧 Validate YAML:
```bash
yamllint yourfile.yaml
kubectl apply -f yourfile.yaml --dry-run=client
```

🔍 Argo CD Logs:
```bash
kubectl logs -n argocd -l app.kubernetes.io/name=argocd-application-controller
```

🔍 UI Diagnostics:
- View sync status
- Check events tab for error messages


📌 10. Argo CD User Management:
----------------------------------
Argo CD supports built-in and external user management through:
- Static admin accounts (argocd-cm ConfigMap)
- RBAC policies
- SSO integration (OIDC, LDAP, SAML)

🔧 Create a user in argocd-cm ConfigMap:
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/managed-by: argocd
  annotations:
    managed-by: argocd
  data:
    accounts.dev-user: apiKey, login
```

🔧 Define RBAC roles in argocd-rbac-cm:
```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-rbac-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-rbac-cm
  data:
    policy.default: role:readonly
    policy.csv: |
      p, role:admin, applications, *, */*, allow
      g, dev-user, role:admin
```


🚀 Summary:
-----------
This session focused on deploying Kubernetes apps using Argo CD with GitOps best practices, managing apps dynamically, configuring YAML properly, handling multi-cluster setups, troubleshooting issues, and understanding Argo CD user management and NodePort login.

Stay GitOps ready! 🚀

