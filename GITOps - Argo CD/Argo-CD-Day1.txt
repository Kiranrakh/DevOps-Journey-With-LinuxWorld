# -------------------------------------------------------------
#                     üöÄ Argo CD Documentation
# -------------------------------------------------------------

üìò WHAT IS ARGO CD?
# -------------------------------------------------------------
Argo CD (https://argo-cd.readthedocs.io/en/stable/) is a declarative 
GitOps continuous delivery (CD) tool for Kubernetes.

- It syncs Kubernetes resources from Git repos.
- Kubernetes-native and keeps cluster state in sync with Git.
- Git is the single source of truth.

# -------------------------------------------------------------
üìö VCS vs SCM
# -------------------------------------------------------------
- VCS (Version Control System):
  Tracks code changes over time. Example: Git (https://git-scm.com/)
- SCM (Source Code Management):
  Broader term including collaboration, branching, access control.

# -------------------------------------------------------------
üîÅ CI/CD OVERVIEW
# -------------------------------------------------------------
CI/CD automates integration and deployment steps.

CI (Continuous Integration):
  - VCS >> Build >> Test >> Package
  - Tools: Jenkins, GitHub Actions, GitLab CI

CD (Continuous Delivery/Deployment):
  - Package >> Deliver >> Deploy
  - Tools: Jenkins, Argo CD

Jenkins CD Challenges:
  - Complex, script-heavy
  - Argo CD simplifies CD using Git as source of truth

# -------------------------------------------------------------
üö¢ KUBERNETES DEPLOYMENT REQUIREMENTS
# -------------------------------------------------------------
- Kubernetes (via Minikube or EKS)
- GitHub ID for repo access
- kubeconfig to interact with cluster
- Argo CD runs inside Kubernetes

# -------------------------------------------------------------
üõ†Ô∏è SETUP (Windows / AWS EKS)
# -------------------------------------------------------------

1. Install AWS CLI
2. Install eksctl
3. Install kubectl
4. Configure AWS access keys

# EKS Cluster Creation:
```bash
eksctl create cluster --name <cluster-name>  # Create a new Kubernetes cluster
```

# üì¶ DEPLOYMENT TO KUBERNETES
# Basic Commands:
```bash
kubectl get pods  # List all pods
kubectl create deployment mydeploy --image=kiran22222/nginx-kiran:v1  # Create deployment
kubectl get deployment  # Check the created deployment
```

# Generate Deployment YAML:
```bash
mkdir Argo-Cd-training  # Create project directory
kubectl create deployment mydeploy --image=kiran22222/nginx-kiran:v1 \ 
  --dry-run=client -o yaml > mydeployment.yml  # Create deployment YAML without applying
kubectl apply -f mydeployment.yml  # Apply the deployment YAML
kubectl create namespace argocd  # Create namespace for Argo CD
```

# üöÄ INSTALLING ARGO CD
```bash
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml  # Install Argo CD
kubectl get all -n argocd  # View all Argo CD components
kubectl get svc -n argocd  # Get Argo CD services
kubectl port-forward svc/argocd-server -n argocd 8080:443  # Forward Argo CD UI to localhost
kubectl get secret argocd-initial-admin-secret -n argocd -o yaml  # Get Argo CD admin password
echo <password> | base64 -d  # Decode the base64 password (Linux/macOS)
```

# üåê USING THE ARGO CD UI
- Open: http://localhost:8080
- Login as admin using decoded password
- Create app from Git repo
- Click SYNC >> OK to deploy

# Optional:
- Enable sync policy for auto-deploy
- Set Git polling intervals

# Git Commands:
```bash
git diff v1 v2  # Compare version v1 and v2
git reset --hard v1  # Roll back to version v1
git push --force  # Force push changes to remote repo
```

