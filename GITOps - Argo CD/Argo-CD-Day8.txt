============================================================
 Session 8: Argo CD ApplicationSets & Multi-Cluster Deployments
============================================================

📘 Topics Covered:
------------------
1. Argo CD ApplicationSets
2. Multi-Cluster Deployments using Argo CD
3. GitOps Automation
4. List Generator
5. Dynamic Application Creation
6. Minikube Cluster Setup
7. YAML Configuration Troubleshooting & Validation
8. Argo CD CLI Commands


📌 1. Argo CD ApplicationSets Overview:
---------------------------------------
ApplicationSets is a controller that extends Argo CD by enabling automatic generation of Applications.

✅ Benefits:
- Automates app creation across clusters/environments
- Reduces YAML duplication
- Supports various generators: List, Git, Cluster, Matrix


📌 2. Multi-Cluster Deployment:
-------------------------------
You can register additional clusters in Argo CD to enable multi-cluster management.

🔧 Command:
```bash
argocd cluster add <CONTEXT-NAME>
```


📌 3. GitOps Automation:
-------------------------
GitOps makes Git the source of truth for app deployment. Argo CD automatically syncs changes from Git to your cluster.

✅ Benefits:
- Version control & auditability
- Easy rollback
- Continuous delivery with Git as the trigger


📌 4. List Generator Example:
------------------------------
This generator is used to define a list of static clusters for app creation.

🧾 application-set.yaml:
```yaml
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: list-generator-demo
spec:
  generators:
    - list:
        elements:
          - cluster: dev
            url: https://kubernetes.default.svc
          - cluster: prod
            url: https://prod.cluster.local
  template:
    metadata:
      name: '{{cluster}}-app'
    spec:
      project: default
      source:
        repoURL: https://github.com/<user>/<repo>
        targetRevision: HEAD
        path: apps/{{cluster}}
      destination:
        server: '{{url}}'
        namespace: default
      syncPolicy:
        automated:
          selfHeal: true
          prune: true
```


📌 5. Dynamic Application Creation:
-----------------------------------
ApplicationSets supports dynamic app creation using different generators:

🧩 Types of Generators:
- List: Static values
- Git: Based on directories/branches
- Cluster: Auto-detects registered clusters
- Matrix: Combines generators to create permutations


📌 6. Minikube Cluster Setup:
------------------------------
To set up a local test environment:

🔧 Start Minikube:
```bash
minikube start --driver=docker
```

🔧 Install Argo CD:
```bash
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
```

🌐 Access Argo CD UI:
```bash
kubectl port-forward svc/argocd-server -n argocd 8080:443
```

🔐 Get Admin Password:
```bash
kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d
```

🔐 Login to CLI:
```bash
argocd login localhost:8080
```


📌 7. YAML Configuration & Troubleshooting:
-------------------------------------------
🔍 Tips:
- Use consistent spacing (no tabs)
- Validate files with tools before applying

🔧 Validate YAML:
```bash
yamllint yourfile.yaml
kubectl apply -f yourfile.yaml --dry-run=client
```

🌐 Online YAML Validator: https://www.yamllint.com


📌 8. Argo CD CLI Commands:
----------------------------
📋 List applications:
```bash
argocd app list
```

🔎 Get app details:
```bash
argocd app get <APP-NAME>
```

🔄 Sync app manually:
```bash
argocd app sync <APP-NAME>
```

❌ Delete app:
```bash
argocd app delete <APP-NAME>
```

🚪 Logout:
```bash
argocd logout <ARGOCD-SERVER>
```


✅ Summary:
------------
This session helped you:
- Use ApplicationSets for automated, dynamic app deployment
- Work with multiple clusters using Argo CD
- Set up and test Argo CD with Minikube
- Understand List generator for creating apps
- Validate and troubleshoot YAML for clean GitOps workflows

Ready to automate GitOps like a pro! 🚀

-----------------------------------------------------------------------



